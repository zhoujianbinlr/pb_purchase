<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd 
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"
    default-lazy-init="false">
    <!-- 注入spring助手类,以便直接在代码中获取bean对象 -->
    <bean class="com.cn.framework.common.spring.ext.SpringContextHolder"/>
    
    <!-- 加载资源文件 -->
    <bean id="springProperty" class="com.cn.framework.common.spring.config.CombaPropertyPlaceholderConfigurer">
        <!-- 设置可以从JVM中取值 -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <!-- 忽略不存在的资源文件 -->
        <property name="ignoreResourceNotFound" value="false" />
        <property name="locations">
            <list>
                <!-- 引入jdbc配置文件 -->
                <value>classpath*:/framework_dev.properties</value>
                <value>classpath*:/jdbc_dev.properties</value>
               <!--  <value>classpath*:/redis/redis_dev.properties</value> -->
            </list>
        </property>
    </bean>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.cn">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <!-- 配置StatFilter -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 执行时间超过1秒的sql将被记录 -->
        <property name="slowSqlMillis" value="1000" />
        <property name="logSlowSql" value="true" />
        <!-- 合并sql -->
        <property name="mergeSql" value="true" />
    </bean>

    <!-- druid防御sql注入攻击 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <!-- 指定数据库类型 -->
        <property name="dbType" value="mysql" /> 
        <!-- 对被认为是攻击的SQL进行LOG.error输出  -->
        <property name="logViolation" value="false" />
        <!-- 对被认为是攻击的SQL抛出SQLExcepton -->
        <property name="throwException" value="true" />
    </bean>

    <!-- 配置输出日志 -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <!-- 输出可执行的SQL -->
        <property name="statementExecutableSqlLogEnable" value="true" />
        <!-- 所有连接上发生异常的日志 -->
        <property name="connectionLogErrorEnabled" value="true" />
        <!-- 所有Statement发生异常的日志  -->
        <property name="statementLogErrorEnabled" value="true" />
    </bean>
    
    <!-- 数据源配置, 使用 druid 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <!-- <ref bean="wall-filter" /> -->
                <ref bean="log-filter" />
            </list>
        </property>
    </bean>

    <!-- 启用spring对lob的支持 -->
    <!-- 定义一般数据库的lob处理器,包括db2,sqlserver,mysql,oracle10g以上的版本 都适用 <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" /> -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 
        <property name="typeAliasesPackage" value="com.cn"/>
        -->
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:/mybatis/mapper/**/*.xml" />
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                            rowBoundsWithCount=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <constructor-arg index="1" value="BATCH" />
    </bean>  
    
    <!-- 事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 定义事务管理器（声明式的事务） 开头的方法为只读事务,其它为新事物-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
        	<tx:method name="insert*"   propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="add*"      propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="create*"   propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="save*"     propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="del*"      propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="remove*"   propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="update*"   propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="batch*"    propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="start*"    propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="finish*"   propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="run*"      propagation="REQUIRED"  rollback-for="java.lang.Exception" />
            <tx:method name="msgPush"   propagation="SUPPORTS"  read-only="true" no-rollback-for="java.lang.Exception"/>
            <tx:method name="insertByReport"   propagation="SUPPORTS"  read-only="true" no-rollback-for="java.lang.Exception"/>
            <tx:method name="*"         propagation="SUPPORTS"  read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <!-- 使用annotation定义事务
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /> 
    -->
    <aop:config proxy-target-class="true" >
        <aop:advisor pointcut="execution(* com.cn..*Service*.*(..))" advice-ref="txAdvice" />
        <aop:advisor pointcut="execution(* com.cn..*Dao*.*(..))" advice-ref="txAdvice" />
        <aop:advisor pointcut="execution(* com.cn..*Call*.*(..))" advice-ref="txAdvice" />
        <aop:advisor pointcut="execution(* com.cn..*Collector*.*(..))" advice-ref="txAdvice" />
        <aop:advisor pointcut="execution(* com.cn..*Task*.*(..))" advice-ref="txAdvice" />
    </aop:config>
    
    
    <!-- 性能拦截统计 -->
    <bean id="methodTimeAdvice" class="com.cn.framework.interceptor.MethodTimeAdviceInterceptor" />
    <aop:config>
        <aop:advisor id="methodTimeLog" advice-ref="methodTimeAdvice" pointcut="execution(* *..service..*(..))" />
    </aop:config>
    
    

    <!--引入redis 缓存配置 
    <import resource="classpath*:/redis/redis.xml" />
    -->
    <!--引入远程调用interface service 
    <import resource="classpath*:/dubbo/dubbo-service.xml" />
    -->
    <!-- 数据操作与缓存管理   -->
    <!-- <import resource="classpath*:/com/cn/common/datas/cache/context/biz_datas_handle.xml" /> -->
   
    
    <!-- Dubbo服务热部署 
    <import resource="classpath*:" />
    -->

    
    <!-- 加载基础业务数据到缓存 正式还是测试版本  0开发  1测试  2正式-->
    <bean id="initAppData" class="com.cn.common.init.InitAppDataBean" lazy-init="false" >
        <property name="systemVersion" value="${system.publish.version}" />
        <!--
        <property name="jdbcRcIp" value="192.168.2.208" />
        <property name="jdbcDevIp" value="192.168.2.208" />
        <property name="jdbcTestIp" value="192.168.2.208" />
        <property name="cacheRcIp" value="192.168.2.209" />
        <property name="cacheDevIp" value="192.168.2.209" />
        <property name="cacheTestIp" value="192.168.2.209" /> 
        -->
        
        <property name="jdbcRcIp" value="172.16.30.105" />
        <property name="jdbcDevIp" value="192.168.200.225" />
        <property name="jdbcTestIp" value="120.77.171.64" />
        <property name="cacheRcIp" value="172.16.30.108" />
        <property name="cacheDevIp" value="192.168.200.225" />
        <property name="cacheTestIp" value="119.23.201.125" />
        
    </bean>
   
</beans>    